// Generated by rstantools.  Do not edit by hand.

/*
    rcbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rcbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rcbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_rcmodel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_rcmodel");
    reader.add_event(80, 78, "end", "model_rcmodel");
    return reader;
}
#include <stan_meta_header.hpp>
class model_rcmodel
  : public stan::model::model_base_crtp<model_rcmodel> {
private:
        int pre_working_age;
        int working_age;
        int retirement;
        int post_retirement;
        int N;
        vector_d x;
        std::vector<int> y;
        vector_d pop;
public:
    model_rcmodel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_rcmodel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_rcmodel_namespace::model_rcmodel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "pre_working_age", "int", context__.to_vec());
            pre_working_age = int(0);
            vals_i__ = context__.vals_i("pre_working_age");
            pos__ = 0;
            pre_working_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "pre_working_age", pre_working_age, 0);
            check_less_or_equal(function__, "pre_working_age", pre_working_age, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "working_age", "int", context__.to_vec());
            working_age = int(0);
            vals_i__ = context__.vals_i("working_age");
            pos__ = 0;
            working_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "working_age", working_age, 0);
            check_less_or_equal(function__, "working_age", working_age, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "retirement", "int", context__.to_vec());
            retirement = int(0);
            vals_i__ = context__.vals_i("retirement");
            pos__ = 0;
            retirement = vals_i__[pos__++];
            check_greater_or_equal(function__, "retirement", retirement, 0);
            check_less_or_equal(function__, "retirement", retirement, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "post_retirement", "int", context__.to_vec());
            post_retirement = int(0);
            vals_i__ = context__.vals_i("post_retirement");
            pos__ = 0;
            post_retirement = vals_i__[pos__++];
            check_greater_or_equal(function__, "post_retirement", post_retirement, 0);
            check_less_or_equal(function__, "post_retirement", post_retirement, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("pop", "N", N);
            context__.validate_dims("data initialization", "pop", "vector_d", context__.to_vec(N));
            pop = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            size_t pop_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pop_j_1_max__; ++j_1__) {
                pop(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("alpha1", "(1 * pre_working_age)", (1 * pre_working_age));
            num_params_r__ += (1 * (1 * pre_working_age));
            current_statement_begin__ = 13;
            validate_non_negative_index("alpha2", "(1 * working_age)", (1 * working_age));
            num_params_r__ += (1 * (1 * working_age));
            current_statement_begin__ = 14;
            validate_non_negative_index("alpha3", "(1 * retirement)", (1 * retirement));
            num_params_r__ += (1 * (1 * retirement));
            current_statement_begin__ = 15;
            validate_non_negative_index("a1", "(1 * pre_working_age)", (1 * pre_working_age));
            num_params_r__ += (1 * (1 * pre_working_age));
            current_statement_begin__ = 16;
            validate_non_negative_index("a2", "(1 * working_age)", (1 * working_age));
            num_params_r__ += (1 * (1 * working_age));
            current_statement_begin__ = 17;
            validate_non_negative_index("a3", "(1 * retirement)", (1 * retirement));
            num_params_r__ += (1 * (1 * retirement));
            current_statement_begin__ = 18;
            validate_non_negative_index("a4", "(1 * post_retirement)", (1 * post_retirement));
            num_params_r__ += (1 * (1 * post_retirement));
            current_statement_begin__ = 19;
            validate_non_negative_index("mu2", "(1 * working_age)", (1 * working_age));
            num_params_r__ += (1 * (1 * working_age));
            current_statement_begin__ = 20;
            validate_non_negative_index("mu3", "(1 * retirement)", (1 * retirement));
            num_params_r__ += (1 * (1 * retirement));
            current_statement_begin__ = 21;
            validate_non_negative_index("lambda2", "(1 * working_age)", (1 * working_age));
            num_params_r__ += (1 * (1 * working_age));
            current_statement_begin__ = 22;
            validate_non_negative_index("lambda3", "(1 * retirement)", (1 * retirement));
            num_params_r__ += (1 * (1 * retirement));
            current_statement_begin__ = 23;
            validate_non_negative_index("lambda4", "(1 * post_retirement)", (1 * post_retirement));
            num_params_r__ += (1 * (1 * post_retirement));
            current_statement_begin__ = 24;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_rcmodel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 12;
        if (!(context__.contains_r("alpha1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha1");
        pos__ = 0U;
        validate_non_negative_index("alpha1", "(1 * pre_working_age)", (1 * pre_working_age));
        context__.validate_dims("parameter initialization", "alpha1", "double", context__.to_vec((1 * pre_working_age)));
        std::vector<double> alpha1((1 * pre_working_age), double(0));
        size_t alpha1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < alpha1_k_0_max__; ++k_0__) {
            alpha1[k_0__] = vals_r__[pos__++];
        }
        size_t alpha1_i_0_max__ = (1 * pre_working_age);
        for (size_t i_0__ = 0; i_0__ < alpha1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("alpha2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha2");
        pos__ = 0U;
        validate_non_negative_index("alpha2", "(1 * working_age)", (1 * working_age));
        context__.validate_dims("parameter initialization", "alpha2", "double", context__.to_vec((1 * working_age)));
        std::vector<double> alpha2((1 * working_age), double(0));
        size_t alpha2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < alpha2_k_0_max__; ++k_0__) {
            alpha2[k_0__] = vals_r__[pos__++];
        }
        size_t alpha2_i_0_max__ = (1 * working_age);
        for (size_t i_0__ = 0; i_0__ < alpha2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("alpha3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha3");
        pos__ = 0U;
        validate_non_negative_index("alpha3", "(1 * retirement)", (1 * retirement));
        context__.validate_dims("parameter initialization", "alpha3", "double", context__.to_vec((1 * retirement)));
        std::vector<double> alpha3((1 * retirement), double(0));
        size_t alpha3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < alpha3_k_0_max__; ++k_0__) {
            alpha3[k_0__] = vals_r__[pos__++];
        }
        size_t alpha3_i_0_max__ = (1 * retirement);
        for (size_t i_0__ = 0; i_0__ < alpha3_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("a1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a1");
        pos__ = 0U;
        validate_non_negative_index("a1", "(1 * pre_working_age)", (1 * pre_working_age));
        context__.validate_dims("parameter initialization", "a1", "double", context__.to_vec((1 * pre_working_age)));
        std::vector<double> a1((1 * pre_working_age), double(0));
        size_t a1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < a1_k_0_max__; ++k_0__) {
            a1[k_0__] = vals_r__[pos__++];
        }
        size_t a1_i_0_max__ = (1 * pre_working_age);
        for (size_t i_0__ = 0; i_0__ < a1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, a1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("a2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a2");
        pos__ = 0U;
        validate_non_negative_index("a2", "(1 * working_age)", (1 * working_age));
        context__.validate_dims("parameter initialization", "a2", "double", context__.to_vec((1 * working_age)));
        std::vector<double> a2((1 * working_age), double(0));
        size_t a2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
            a2[k_0__] = vals_r__[pos__++];
        }
        size_t a2_i_0_max__ = (1 * working_age);
        for (size_t i_0__ = 0; i_0__ < a2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, a2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("a3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a3");
        pos__ = 0U;
        validate_non_negative_index("a3", "(1 * retirement)", (1 * retirement));
        context__.validate_dims("parameter initialization", "a3", "double", context__.to_vec((1 * retirement)));
        std::vector<double> a3((1 * retirement), double(0));
        size_t a3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < a3_k_0_max__; ++k_0__) {
            a3[k_0__] = vals_r__[pos__++];
        }
        size_t a3_i_0_max__ = (1 * retirement);
        for (size_t i_0__ = 0; i_0__ < a3_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, a3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("a4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a4");
        pos__ = 0U;
        validate_non_negative_index("a4", "(1 * post_retirement)", (1 * post_retirement));
        context__.validate_dims("parameter initialization", "a4", "double", context__.to_vec((1 * post_retirement)));
        std::vector<double> a4((1 * post_retirement), double(0));
        size_t a4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < a4_k_0_max__; ++k_0__) {
            a4[k_0__] = vals_r__[pos__++];
        }
        size_t a4_i_0_max__ = (1 * post_retirement);
        for (size_t i_0__ = 0; i_0__ < a4_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, a4[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a4: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("mu2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu2");
        pos__ = 0U;
        validate_non_negative_index("mu2", "(1 * working_age)", (1 * working_age));
        context__.validate_dims("parameter initialization", "mu2", "double", context__.to_vec((1 * working_age)));
        std::vector<double> mu2((1 * working_age), double(0));
        size_t mu2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < mu2_k_0_max__; ++k_0__) {
            mu2[k_0__] = vals_r__[pos__++];
        }
        size_t mu2_i_0_max__ = (1 * working_age);
        for (size_t i_0__ = 0; i_0__ < mu2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mu2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("mu3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu3");
        pos__ = 0U;
        validate_non_negative_index("mu3", "(1 * retirement)", (1 * retirement));
        context__.validate_dims("parameter initialization", "mu3", "double", context__.to_vec((1 * retirement)));
        std::vector<double> mu3((1 * retirement), double(0));
        size_t mu3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < mu3_k_0_max__; ++k_0__) {
            mu3[k_0__] = vals_r__[pos__++];
        }
        size_t mu3_i_0_max__ = (1 * retirement);
        for (size_t i_0__ = 0; i_0__ < mu3_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, max(x), mu3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("lambda2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda2");
        pos__ = 0U;
        validate_non_negative_index("lambda2", "(1 * working_age)", (1 * working_age));
        context__.validate_dims("parameter initialization", "lambda2", "double", context__.to_vec((1 * working_age)));
        std::vector<double> lambda2((1 * working_age), double(0));
        size_t lambda2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < lambda2_k_0_max__; ++k_0__) {
            lambda2[k_0__] = vals_r__[pos__++];
        }
        size_t lambda2_i_0_max__ = (1 * working_age);
        for (size_t i_0__ = 0; i_0__ < lambda2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, lambda2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("lambda3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda3");
        pos__ = 0U;
        validate_non_negative_index("lambda3", "(1 * retirement)", (1 * retirement));
        context__.validate_dims("parameter initialization", "lambda3", "double", context__.to_vec((1 * retirement)));
        std::vector<double> lambda3((1 * retirement), double(0));
        size_t lambda3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < lambda3_k_0_max__; ++k_0__) {
            lambda3[k_0__] = vals_r__[pos__++];
        }
        size_t lambda3_i_0_max__ = (1 * retirement);
        for (size_t i_0__ = 0; i_0__ < lambda3_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, lambda3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("lambda4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda4");
        pos__ = 0U;
        validate_non_negative_index("lambda4", "(1 * post_retirement)", (1 * post_retirement));
        context__.validate_dims("parameter initialization", "lambda4", "double", context__.to_vec((1 * post_retirement)));
        std::vector<double> lambda4((1 * post_retirement), double(0));
        size_t lambda4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < lambda4_k_0_max__; ++k_0__) {
            lambda4[k_0__] = vals_r__[pos__++];
        }
        size_t lambda4_i_0_max__ = (1 * post_retirement);
        for (size_t i_0__ = 0; i_0__ < lambda4_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_ub_unconstrain(0.05, lambda4[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda4: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "c", "double", context__.to_vec());
        double c(0);
        c = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 12;
            std::vector<local_scalar_t__> alpha1;
            size_t alpha1_d_0_max__ = (1 * pre_working_age);
            alpha1.reserve(alpha1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha1.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha1.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 13;
            std::vector<local_scalar_t__> alpha2;
            size_t alpha2_d_0_max__ = (1 * working_age);
            alpha2.reserve(alpha2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 14;
            std::vector<local_scalar_t__> alpha3;
            size_t alpha3_d_0_max__ = (1 * retirement);
            alpha3.reserve(alpha3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha3.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha3.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 15;
            std::vector<local_scalar_t__> a1;
            size_t a1_d_0_max__ = (1 * pre_working_age);
            a1.reserve(a1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < a1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    a1.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    a1.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 16;
            std::vector<local_scalar_t__> a2;
            size_t a2_d_0_max__ = (1 * working_age);
            a2.reserve(a2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < a2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    a2.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    a2.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 17;
            std::vector<local_scalar_t__> a3;
            size_t a3_d_0_max__ = (1 * retirement);
            a3.reserve(a3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < a3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    a3.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    a3.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 18;
            std::vector<local_scalar_t__> a4;
            size_t a4_d_0_max__ = (1 * post_retirement);
            a4.reserve(a4_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < a4_d_0_max__; ++d_0__) {
                if (jacobian__)
                    a4.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    a4.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 19;
            std::vector<local_scalar_t__> mu2;
            size_t mu2_d_0_max__ = (1 * working_age);
            mu2.reserve(mu2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mu2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 20;
            std::vector<local_scalar_t__> mu3;
            size_t mu3_d_0_max__ = (1 * retirement);
            mu3.reserve(mu3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu3.push_back(in__.scalar_lub_constrain(0, max(x), lp__));
                else
                    mu3.push_back(in__.scalar_lub_constrain(0, max(x)));
            }
            current_statement_begin__ = 21;
            std::vector<local_scalar_t__> lambda2;
            size_t lambda2_d_0_max__ = (1 * working_age);
            lambda2.reserve(lambda2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    lambda2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 22;
            std::vector<local_scalar_t__> lambda3;
            size_t lambda3_d_0_max__ = (1 * retirement);
            lambda3.reserve(lambda3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda3.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    lambda3.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 23;
            std::vector<local_scalar_t__> lambda4;
            size_t lambda4_d_0_max__ = (1 * post_retirement);
            lambda4.reserve(lambda4_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda4_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda4.push_back(in__.scalar_ub_constrain(0.05, lp__));
                else
                    lambda4.push_back(in__.scalar_ub_constrain(0.05));
            }
            current_statement_begin__ = 24;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            if (jacobian__)
                c = in__.scalar_lub_constrain(0, 1, lp__);
            else
                c = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("mu_rc", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_rc(N);
            stan::math::initialize(mu_rc, DUMMY_VAR__);
            stan::math::fill(mu_rc, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("mu_rc_1", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_rc_1(N);
            stan::math::initialize(mu_rc_1, DUMMY_VAR__);
            stan::math::fill(mu_rc_1, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("mu_rc_2", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_rc_2(N);
            stan::math::initialize(mu_rc_2, DUMMY_VAR__);
            stan::math::fill(mu_rc_2, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("mu_rc_3", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_rc_3(N);
            stan::math::initialize(mu_rc_3, DUMMY_VAR__);
            stan::math::fill(mu_rc_3, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("mu_rc_4", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_rc_4(N);
            stan::math::initialize(mu_rc_4, DUMMY_VAR__);
            stan::math::fill(mu_rc_4, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("zero", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zero(N);
            stan::math::initialize(zero, DUMMY_VAR__);
            stan::math::fill(zero, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 34;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 35;
                stan::model::assign(zero, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable zero");
            }
            current_statement_begin__ = 38;
            stan::math::assign(mu_rc_1, (logical_eq(pre_working_age, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a1, 1, "a1", 1), stan::math::exp(multiply(-(get_base1(alpha1, 1, "alpha1", 1)), x)))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 39;
            stan::math::assign(mu_rc_2, (logical_eq(working_age, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a2, 1, "a2", 1), stan::math::exp(subtract(multiply(-(get_base1(alpha2, 1, "alpha2", 1)), subtract(x, get_base1(mu2, 1, "mu2", 1))), stan::math::exp(multiply(-(get_base1(lambda2, 1, "lambda2", 1)), subtract(x, get_base1(mu2, 1, "mu2", 1)))))))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 40;
            stan::math::assign(mu_rc_3, (logical_eq(retirement, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a3, 1, "a3", 1), stan::math::exp(subtract(multiply(-(get_base1(alpha3, 1, "alpha3", 1)), subtract(x, get_base1(mu3, 1, "mu3", 1))), stan::math::exp(multiply(-(get_base1(lambda3, 1, "lambda3", 1)), subtract(x, get_base1(mu3, 1, "mu3", 1)))))))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 41;
            stan::math::assign(mu_rc_4, (logical_eq(post_retirement, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a4, 1, "a4", 1), stan::math::exp(multiply(get_base1(lambda4, 1, "lambda4", 1), x)))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 42;
            stan::math::assign(mu_rc, add(add(add(add(mu_rc_1, mu_rc_2), mu_rc_3), mu_rc_4), c));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 27;
            size_t mu_rc_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_rc(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_rc" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_rc: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 28;
            size_t mu_rc_1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_rc_1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_rc_1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_rc_1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 29;
            size_t mu_rc_2_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_2_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_rc_2(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_rc_2" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_rc_2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 30;
            size_t mu_rc_3_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_3_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_rc_3(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_rc_3" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_rc_3: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 31;
            size_t mu_rc_4_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_4_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_rc_4(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_rc_4" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_rc_4: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 32;
            size_t zero_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < zero_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(zero(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: zero" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable zero: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 47;
            validate_non_negative_index("log_lambda", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lambda(N);
            stan::math::initialize(log_lambda, DUMMY_VAR__);
            stan::math::fill(log_lambda, DUMMY_VAR__);
            current_statement_begin__ = 49;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 50;
                stan::model::assign(log_lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(mu_rc, i, "mu_rc", 1) + get_base1(pop, i, "pop", 1)), 
                            "assigning variable log_lambda");
            }
            current_statement_begin__ = 53;
            lp_accum__.add(poisson_log<propto__>(y, elt_multiply(mu_rc, pop)));
            current_statement_begin__ = 57;
            if (as_bool(logical_eq(pre_working_age, 1))) {
                current_statement_begin__ = 58;
                lp_accum__.add(normal_log<propto__>(alpha1, 0, 1));
                current_statement_begin__ = 59;
                lp_accum__.add(normal_log<propto__>(a1, 0, 0.1));
            }
            current_statement_begin__ = 61;
            if (as_bool(logical_eq(working_age, 1))) {
                current_statement_begin__ = 62;
                lp_accum__.add(normal_log<propto__>(alpha2, 0, 1));
                current_statement_begin__ = 63;
                lp_accum__.add(normal_log<propto__>(a2, 0, 0.1));
                current_statement_begin__ = 64;
                lp_accum__.add(normal_log<propto__>(mu2, 25, 1));
                current_statement_begin__ = 65;
                lp_accum__.add(normal_log<propto__>(lambda2, 0, 1));
            }
            current_statement_begin__ = 67;
            if (as_bool(logical_eq(retirement, 1))) {
                current_statement_begin__ = 68;
                lp_accum__.add(normal_log<propto__>(alpha3, 0, 1));
                current_statement_begin__ = 69;
                lp_accum__.add(normal_log<propto__>(a3, 0, 0.1));
                current_statement_begin__ = 70;
                lp_accum__.add(normal_log<propto__>(mu3, 65, 1));
                current_statement_begin__ = 71;
                lp_accum__.add(normal_log<propto__>(lambda3, 0, 1));
            }
            current_statement_begin__ = 73;
            if (as_bool(logical_eq(post_retirement, 1))) {
                current_statement_begin__ = 74;
                lp_accum__.add(normal_log<propto__>(a4, 0, 0.05));
                current_statement_begin__ = 75;
                lp_accum__.add(normal_log<propto__>(lambda4, 0, 0.01));
            }
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(c, min(elt_divide(to_vector(y), pop)), 0.1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha1");
        names__.push_back("alpha2");
        names__.push_back("alpha3");
        names__.push_back("a1");
        names__.push_back("a2");
        names__.push_back("a3");
        names__.push_back("a4");
        names__.push_back("mu2");
        names__.push_back("mu3");
        names__.push_back("lambda2");
        names__.push_back("lambda3");
        names__.push_back("lambda4");
        names__.push_back("c");
        names__.push_back("mu_rc");
        names__.push_back("mu_rc_1");
        names__.push_back("mu_rc_2");
        names__.push_back("mu_rc_3");
        names__.push_back("mu_rc_4");
        names__.push_back("zero");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((1 * pre_working_age));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * working_age));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * retirement));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * pre_working_age));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * working_age));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * retirement));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * post_retirement));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * working_age));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * retirement));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * working_age));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * retirement));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 * post_retirement));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_rcmodel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> alpha1;
        size_t alpha1_d_0_max__ = (1 * pre_working_age);
        alpha1.reserve(alpha1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha1_d_0_max__; ++d_0__) {
            alpha1.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < alpha1_k_0_max__; ++k_0__) {
            vars__.push_back(alpha1[k_0__]);
        }
        std::vector<double> alpha2;
        size_t alpha2_d_0_max__ = (1 * working_age);
        alpha2.reserve(alpha2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha2_d_0_max__; ++d_0__) {
            alpha2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < alpha2_k_0_max__; ++k_0__) {
            vars__.push_back(alpha2[k_0__]);
        }
        std::vector<double> alpha3;
        size_t alpha3_d_0_max__ = (1 * retirement);
        alpha3.reserve(alpha3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha3_d_0_max__; ++d_0__) {
            alpha3.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < alpha3_k_0_max__; ++k_0__) {
            vars__.push_back(alpha3[k_0__]);
        }
        std::vector<double> a1;
        size_t a1_d_0_max__ = (1 * pre_working_age);
        a1.reserve(a1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < a1_d_0_max__; ++d_0__) {
            a1.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t a1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < a1_k_0_max__; ++k_0__) {
            vars__.push_back(a1[k_0__]);
        }
        std::vector<double> a2;
        size_t a2_d_0_max__ = (1 * working_age);
        a2.reserve(a2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < a2_d_0_max__; ++d_0__) {
            a2.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t a2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
            vars__.push_back(a2[k_0__]);
        }
        std::vector<double> a3;
        size_t a3_d_0_max__ = (1 * retirement);
        a3.reserve(a3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < a3_d_0_max__; ++d_0__) {
            a3.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t a3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < a3_k_0_max__; ++k_0__) {
            vars__.push_back(a3[k_0__]);
        }
        std::vector<double> a4;
        size_t a4_d_0_max__ = (1 * post_retirement);
        a4.reserve(a4_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < a4_d_0_max__; ++d_0__) {
            a4.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t a4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < a4_k_0_max__; ++k_0__) {
            vars__.push_back(a4[k_0__]);
        }
        std::vector<double> mu2;
        size_t mu2_d_0_max__ = (1 * working_age);
        mu2.reserve(mu2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu2_d_0_max__; ++d_0__) {
            mu2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mu2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < mu2_k_0_max__; ++k_0__) {
            vars__.push_back(mu2[k_0__]);
        }
        std::vector<double> mu3;
        size_t mu3_d_0_max__ = (1 * retirement);
        mu3.reserve(mu3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu3_d_0_max__; ++d_0__) {
            mu3.push_back(in__.scalar_lub_constrain(0, max(x)));
        }
        size_t mu3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < mu3_k_0_max__; ++k_0__) {
            vars__.push_back(mu3[k_0__]);
        }
        std::vector<double> lambda2;
        size_t lambda2_d_0_max__ = (1 * working_age);
        lambda2.reserve(lambda2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda2_d_0_max__; ++d_0__) {
            lambda2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t lambda2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < lambda2_k_0_max__; ++k_0__) {
            vars__.push_back(lambda2[k_0__]);
        }
        std::vector<double> lambda3;
        size_t lambda3_d_0_max__ = (1 * retirement);
        lambda3.reserve(lambda3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda3_d_0_max__; ++d_0__) {
            lambda3.push_back(in__.scalar_lb_constrain(0));
        }
        size_t lambda3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < lambda3_k_0_max__; ++k_0__) {
            vars__.push_back(lambda3[k_0__]);
        }
        std::vector<double> lambda4;
        size_t lambda4_d_0_max__ = (1 * post_retirement);
        lambda4.reserve(lambda4_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda4_d_0_max__; ++d_0__) {
            lambda4.push_back(in__.scalar_ub_constrain(0.05));
        }
        size_t lambda4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < lambda4_k_0_max__; ++k_0__) {
            vars__.push_back(lambda4[k_0__]);
        }
        double c = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(c);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("mu_rc", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_rc(N);
            stan::math::initialize(mu_rc, DUMMY_VAR__);
            stan::math::fill(mu_rc, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("mu_rc_1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_rc_1(N);
            stan::math::initialize(mu_rc_1, DUMMY_VAR__);
            stan::math::fill(mu_rc_1, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("mu_rc_2", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_rc_2(N);
            stan::math::initialize(mu_rc_2, DUMMY_VAR__);
            stan::math::fill(mu_rc_2, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("mu_rc_3", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_rc_3(N);
            stan::math::initialize(mu_rc_3, DUMMY_VAR__);
            stan::math::fill(mu_rc_3, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("mu_rc_4", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_rc_4(N);
            stan::math::initialize(mu_rc_4, DUMMY_VAR__);
            stan::math::fill(mu_rc_4, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("zero", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> zero(N);
            stan::math::initialize(zero, DUMMY_VAR__);
            stan::math::fill(zero, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 34;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 35;
                stan::model::assign(zero, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable zero");
            }
            current_statement_begin__ = 38;
            stan::math::assign(mu_rc_1, (logical_eq(pre_working_age, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a1, 1, "a1", 1), stan::math::exp(multiply(-(get_base1(alpha1, 1, "alpha1", 1)), x)))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 39;
            stan::math::assign(mu_rc_2, (logical_eq(working_age, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a2, 1, "a2", 1), stan::math::exp(subtract(multiply(-(get_base1(alpha2, 1, "alpha2", 1)), subtract(x, get_base1(mu2, 1, "mu2", 1))), stan::math::exp(multiply(-(get_base1(lambda2, 1, "lambda2", 1)), subtract(x, get_base1(mu2, 1, "mu2", 1)))))))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 40;
            stan::math::assign(mu_rc_3, (logical_eq(retirement, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a3, 1, "a3", 1), stan::math::exp(subtract(multiply(-(get_base1(alpha3, 1, "alpha3", 1)), subtract(x, get_base1(mu3, 1, "mu3", 1))), stan::math::exp(multiply(-(get_base1(lambda3, 1, "lambda3", 1)), subtract(x, get_base1(mu3, 1, "mu3", 1)))))))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 41;
            stan::math::assign(mu_rc_4, (logical_eq(post_retirement, 1) ? stan::math::promote_scalar<local_scalar_t__>(multiply(get_base1(a4, 1, "a4", 1), stan::math::exp(multiply(get_base1(lambda4, 1, "lambda4", 1), x)))) : stan::math::promote_scalar<local_scalar_t__>(zero) ));
            current_statement_begin__ = 42;
            stan::math::assign(mu_rc, add(add(add(add(mu_rc_1, mu_rc_2), mu_rc_3), mu_rc_4), c));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_rc_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_rc(j_1__));
                }
                size_t mu_rc_1_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_rc_1_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_rc_1(j_1__));
                }
                size_t mu_rc_2_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_rc_2_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_rc_2(j_1__));
                }
                size_t mu_rc_3_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_rc_3_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_rc_3(j_1__));
                }
                size_t mu_rc_4_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_rc_4_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_rc_4(j_1__));
                }
                size_t zero_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < zero_j_1_max__; ++j_1__) {
                    vars__.push_back(zero(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_rcmodel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < alpha1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < alpha2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < alpha3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < a1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < a3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < a4_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a4" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < mu2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < mu3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < lambda2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < lambda3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < lambda4_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda4" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_rc_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_2_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_3_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_3_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_3" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_4_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_4_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_4" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t zero_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < zero_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zero" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < alpha1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < alpha2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < alpha3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a1_k_0_max__ = (1 * pre_working_age);
        for (size_t k_0__ = 0; k_0__ < a1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < a3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < a4_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a4" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < mu2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < mu3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda2_k_0_max__ = (1 * working_age);
        for (size_t k_0__ = 0; k_0__ < lambda2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda3_k_0_max__ = (1 * retirement);
        for (size_t k_0__ = 0; k_0__ < lambda3_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda3" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda4_k_0_max__ = (1 * post_retirement);
        for (size_t k_0__ = 0; k_0__ < lambda4_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda4" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_rc_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_2_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_3_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_3_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_3" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_rc_4_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_4_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc_4" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t zero_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < zero_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zero" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_rcmodel_namespace::model_rcmodel stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
